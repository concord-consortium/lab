{
  "title": "Target Game (Free Play)",
  "publicationStatus": "public",
  "subtitle": "Can you steer a charged particle to a target by using charged objects?",
  "aspectRatio": 1.27,
  "fontScale": 0.65,
  "helpOnLoad": true,
  "about": [
    "Use the *Launch a positive particle* button to shoot a positive particle across the game board.",
    "Place any number of charged objects in any location to steer the positive particle to the target.",
    "Can you get the charged particle to hit the target?"
  ],
  "models": [
    {
      "type": "md2d",
      "id": "level1",
      "url": "imports/legacy-mw-content/converted/interactions/target-game-free-play/targetFreePlay$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/target-game-free-play/targetFreePlay$0.mml",
      "viewOptions": {
        "controlButtons": "",
        "electricFieldDensity": 24,
        "electricFieldColor": "rgb(0,255,0)",
        "forceVectors": {
          "length": 30
        }
      },
      "onLoad": [
        "set('loadedLevelID', 'level1');",
        "set('selectedLevelID', 'level1');",
        "setShapeProperties(3, {lineColor: 'rgb(255,0,0)', lineWeight: 7});",
        "set('atomTraceColor','yellow');",
        "set('atomIndices',[]);",
        "set('atomOriginalSign',[]);",
        "var timeStepsPerTick = get('timeStepsPerTick'),",
        "    collisionPadding = 0.075;",
        "onClick('background', function(x, y, d, i) {",
        "  if (get('chargeSign') !== -99) {",
        "    if( addAtom({x: x, y: y, charge: get('chargeSign')*get('chargeMagnitude'), pinned: true}) ) {",
        "      get('atomIndices').push( getNumberOfAtoms()-1 );",
        "      get('atomOriginalSign').push( get('chargeSign') );",
        "    }",
        "  }",
        "});",
        "callEvery(timeStepsPerTick, function() {",
        "  var target = getShapeProperties(2);",
        "  if (atomsWithinRect(target.x, target.y, target.width, target.height).length > 0) {",
        "    alert('Congratulations! You hit the target.');",
        "    stop();",
        "  }",
        "  for (var i = 0; i < 7; i++) {",
        "    target = getObstacleProperties(i);",
        "    if (atomsWithinRect(target.x - collisionPadding, target.y - collisionPadding, target.width + 2*collisionPadding, target.height + 2*collisionPadding).length > 0) {",
        "      alert('You hit a barrier. Try again.');",
        "      stop();",
        "    }",
        "  }",
        "});"
      ]
    },
    {
      "type": "md2d",
      "id": "level2",
      "url": "imports/legacy-mw-content/converted/interactions/target-game-free-play/level2FreePlay$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/target-game-free-play/level2FreePlay$0.mml",
      "viewOptions": {
        "controlButtons": "",
        "electricFieldDensity": 24,
        "electricFieldColor": "rgb(0,255,0)",
        "forceVectors": {
          "length": 30
        }
      },
      "onLoad": [
        "set('loadedLevelID', 'level2');",
        "set('selectedLevelID', 'level2');",
        "setShapeProperties(3, {lineColor: 'rgb(255,0,0)', lineWeight: 7});",
        "set('atomTraceColor','yellow');",
        "set('atomIndices',[]);",
        "set('atomOriginalSign',[]);",
        "var timeStepsPerTick = get('timeStepsPerTick'),",
        "    collisionPadding = 0.075;",
        "onClick('background', function(x, y, d, i) {",
        "  if( addAtom({x: x, y: y, charge: get('chargeSign')*get('chargeMagnitude'), pinned: true}) ) {",
        "    get('atomIndices').push( getNumberOfAtoms()-1 );",
        "    get('atomOriginalSign').push( get('chargeSign') );",
        "  }",
        "});",
        "callEvery(timeStepsPerTick, function() {",
        "  var target = getShapeProperties(2);",
        "  if (atomsWithinRect(target.x, target.y, target.width, target.height).length > 0) {",
        "    alert('Congratulations! You hit the target.');",
        "    stop();",
        "  }",
        "  for (var i = 0; i < 9; i++) {",
        "    target = getObstacleProperties(i);",
        "    if (atomsWithinRect(target.x - collisionPadding, target.y - collisionPadding, target.width + 2*collisionPadding, target.height + 2*collisionPadding).length > 0) {",
        "      alert('You hit a barrier. Try again.');",
        "      stop();",
        "    }",
        "  }",
        "});",
        "start();"
      ]
    }
  ],
  "parameters": [
    {
      "name": "chargeSign",
      "initialValue": 1,
      "onChange": [
        "if (value === -99) {",
        "   onClick('atom', function(x, y, d, i) {",
        "     removeAtom(i);",
        "   });",
        "}",
        "else {",
        "   onClick('atom', function () {});",
        "}"
      ]
    },
    {
      "name": "atomOriginalSign",
      "initialValue": []
    },
    {
      "name": "atomIndices",
      "initialValue": []
    },
    {
      "name": "chargeMagnitude",
      "initialValue": 1,
      "onChange": [
        "batch( function() {",
        "  var prop,",
        "      indices = get('atomIndices'),",
        "      sign = get('atomOriginalSign');",
        "  for( var j, i = 0; i < indices.length; i++ ) {",
        "    j = indices[i];",
        "    prop = getAtomProperties(j);",
        "    setAtomProperties(i, {charge: sign[j] * get('chargeMagnitude')});",
        "  }",
        "});"
      ]
    },
    {
      "name": "loadedLevelID",
      "initialValue": "level1"
    },
    {
      "name": "selectedLevelID",
      "initialValue": "level1",
      "onChange": [
        "if (value !== get('loadedLevelID')) {",
        "  loadModel(value, ['showElectricField', 'showForceVectors'])",
        "}"
      ]
    }
  ],
  "components": [
    {
      "type": "button",
      "id": "add-atom",
      "text": "Launch a positive particle",
      "action": [
        "var idx = atomsWithinRect(0,0,get('width'),get('height'),1);",
        "if (idx.length > 0) {",
        "  untraceAtom(idx[0]);",
        "  removeAtom(idx[0]);",
        "}",
        "addAtom( {x: 0.62, y: 2, element: 1, vx: 0.0025, vy: 0, charge: 1});",
        "idx = atomsWithinRect(0,0,get('width'),get('height'),1);",
        "start();",
        "traceAtom(idx[0]);"
      ]
    },
    {
      "type": "button",
      "id": "reset",
      "text": "Reset",
      "action": [
        "reset({",
        "  retainParameters: ['showElectricField', 'showForceVectors']",
        "});",
        "set('atomIndices',[]);",
        "set('atomOriginalSign',[]);"
      ]
    },
    {
      "type": "button",
      "id": "try-again",
      "text": "Try again",
      "action": [
        "var idx = atomsWithinRect(0,0,get('width'),get('height'),1);",
        "if (idx.length > 0) {",
        "  untraceAtom(idx[0]);",
        "  removeAtom(idx[0]);",
        "}"
      ]
    },
    {
      "type": "checkbox",
      "id": "select-show-force-vectors",
      "text": "Show force on objects",
      "property": "showForceVectors"
    },
    {
      "type": "checkbox",
      "id": "select-show-electric-field",
      "text": "Show electric field",
      "property": "showElectricField"
    },
    {
      "type": "radio",
      "id": "select-add-atom-type",
      "orientation": "horizontal",
      "property": "chargeSign",
      "options": [
        {
          "text": "Add negative",
          "value": -1
        },
        {
          "text": "Add positive",
          "value": 1
        },
        {
          "text": "Delete object",
          "value": -99
        }
      ]
    },
    {
      "type": "radio",
      "id": "select-level",
      "orientation": "horizontal",
      "property": "selectedLevelID",
      "options": [
        {
          "text": "Level 1",
          "value": "level1"
        },
        {
          "text": "Level 2",
          "value": "level2"
        }
      ]
    },
    {
      "type": "slider",
      "id": "select-charge-magnitude",
      "property": "chargeMagnitude",
      "min": 0,
      "max": 5,
      "steps": 10,
      "displayValue": "return format('0.1f')(value)",
      "labels": [
        {
          "value": 1,
          "label": "-/+ 1"
        },
        {
          "value": 5,
          "label": "-/+ 5"
        },
        {
          "value": 3,
          "label": "-/+ 3"
        }
      ]
    },
    {
      "type": "text",
      "id": "label-charge-place-toggle",
      "text": "**Click in game to:**"
    },
    {
      "type": "text",
      "id": "label-select-placed-object-charge",
      "text": "**Set charge amount on placed objects:**"
    }
  ],
  "helpTips": [
    {
      "text": [
        "The goal of this game is to guide a positive particle to the target using other charged objects."
      ]
    },
    {
      "component": "select-add-atom-type",
      "text": [
        "Select *Add negative* or *Add positive* to add charged objects to the game board. You can ",
        "drag charged objects around the board, or select *Delete object* and click ",
        "on a charged object to remove it."
      ]
    },
    {
      "component": "try-again",
      "text": "Use *Try again* to keep objects for another try."
    },
    {
      "component": "reset",
      "text": "Use *Reset* to remove all charged objects and reset controls."
    }
  ],
  "layout": {
    "bottom": [
      ["label-charge-place-toggle", "select-add-atom-type"],
      ["add-atom", "try-again", "select-level", "reset"],
      ["label-select-placed-object-charge", "select-charge-magnitude"],
      ["select-show-electric-field", "select-show-force-vectors"]
    ]
  },
  "template": [
    {
      "id": "bottom",
      "top": "model.bottom",
      "width": "model.width",
      "left": "model.left",
      "align": "center"
    }
  ]
}
