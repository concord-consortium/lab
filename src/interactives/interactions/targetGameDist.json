{
  "title": "Target Game (Distance/Force Relationship)",
  "publicationStatus": "public",
  "subtitle": "Can you manipulate the position of charged particles to steer another object to a target?",
  "aspectRatio": 1.455,
  "fontScale": 0.65,
  "about": [
    "Use the *Launch a positive particle* button to shoot a positive particle across the game board.",
    "Adjust the position of the negatively and positively charged objects to steer the moving particle to the target."
  ],
  "helpOnLoad": true,
  "models": [
    {
      "type": "md2d",
      "id": "level1",
      "url": "imports/legacy-mw-content/converted/interactions/target-game-distance/targetGameDist-noLabels$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/target-game-distance/targetGameDist$0.mml",
      "viewOptions": {
        "controlButtons": "",
        "electricFieldDensity": 24,
        "electricFieldColor": "rgb(0,255,0)"
      },
      "onLoad": [
        "set('loadedLevelID','level1');",
        "set('selectedLevelID','level1');",
        "setAtomProperties(0, {draggable: true});",
        "setAtomProperties(1, {draggable: true});",
        "setShapeProperties(3, {lineColor: 'rgb(255,0,0)', lineWeight: 7});",
        "set('atomTraceColor', 'yellow');",
        "onDrag('atom', function (x, y, d, i) {",
        "  if (i === 0) {",
        "    y = Math.max(2.48, Math.min(3.45, y));",
        "    x = 2.312;",
        "  } else if (i === 1) {",
        "    x = Math.max(4.25, Math.min(5.23, x));",
        "    y = 3.3595;",
        "  }",
        "  setAtomProperties(i, {x: x, y: y});",
        "});",
        "var timePerTick = get('timePerTick'),",
        "    collisionPadding = 0.075;",
        "callEvery(timePerTick, function() {",
        "  var target = getShapeProperties(2);",
        "  if (atomsWithinRect(target.x, target.y, target.width, target.height).length > 0) {",
        "    alert('Congratulations! You hit the target.');",
        "    stop();",
        "  }",
        "  for (var i = 0; i < 6; i++) {",
        "    target = getObstacleProperties(i);",
        "    if (atomsWithinRect(target.x - collisionPadding, target.y - collisionPadding, target.width + 2*collisionPadding, target.height + 2*collisionPadding).length > 0) {",
        "      alert('You hit a barrier. Try again.');",
        "      stop();",
        "    }",
        "  }",
        "});",
        "start();"
      ]
    },
    {
      "type": "md2d",
      "id": "level2",
      "url": "imports/legacy-mw-content/converted/interactions/target-game-distance/level2-noLabels$0.json",
      "importedFrom": "imports/legacy-mw-content/interactions/target-game-distance/level2$0.mml",
      "viewOptions": {
        "controlButtons": "",
        "electricFieldDensity": 24,
        "electricFieldColor": "rgb(0,255,0)"
      },
      "onLoad": [
        "set('loadedLevelID','level2');",
        "set('selectedLevelID','level2');",
        "setAtomProperties(0, {draggable: true});",
        "setAtomProperties(1, {draggable: true});",
        "setShapeProperties(3, {lineColor: 'rgb(255,0,0)', lineWeight: 7});",
        "set('atomTraceColor', 'yellow');",
        "onDrag('atom', function (x, y, d, i) {",
        "  if (i === 0) {",
        "    y = Math.max(2.48, Math.min(3.45, y));",
        "    x = 2.312;",
        "  } else if (i === 1) {",
        "    x = Math.max(4.25, Math.min(5.23, x));",
        "    y = 3.3595;",
        "  }",
        "  setAtomProperties(i, {x: x, y: y});",
        "});",
        "var timePerTick = get('timePerTick'),",
        "    collisionPadding = 0.075;",
        "callEvery(timePerTick, function() {",
        "  var target = getShapeProperties(2);",
        "  if (atomsWithinRect(target.x, target.y, target.width, target.height).length > 0) {",
        "    alert('Congratulations! You hit the target.');",
        "    stop();",
        "  }",
        "  for (var i = 0; i < 6; i++) {",
        "    target = getObstacleProperties(i);",
        "    if (atomsWithinRect(target.x - collisionPadding, target.y - collisionPadding, target.width + 2*collisionPadding, target.height + 2*collisionPadding).length > 0) {",
        "      alert('You hit a barrier. Try again.');",
        "      stop();",
        "    }",
        "  }",
        "});",
        "start();"
      ]
    }
  ],
  "helpTips": [
    {
      "component": "",
      "text": [
        "Your goal is to shoot a positive particle so that it hits the target.",
        "Drag the positive and negative balls into position, then launch your particle. The goal is to hit the target."
      ]
    }
  ],
  "parameters":[
    {
      "name": "loadedLevelID",
      "initialValue": null
    },
    {
      "name": "selectedLevelID",
      "initialValue": null,
      "onChange":  [
        "if (value !== get('loadedLevelID')) {",
        "  loadModel(value, ['showElectricField', 'showForceVectors']);",
        "}"
      ]
    }
  ],
  "components": [
    {
      "type": "button",
      "id": "add-atom",
      "text": "Launch a positive particle",
      "action": [
        "if (getNumberOfAtoms() > 2) {",
        "  untraceAtom(getNumberOfAtoms()-1);",
        "  removeAtom(getNumberOfAtoms()-1);",
        "}",
        "addAtom( {x: getShapeProperties(0).x + getShapeProperties(0).width, y: get('height')/2, element: 1, vx: 0.0025, vy: 0, charge: 1});",
        "start();",
        "traceAtom( getNumberOfAtoms() - 1 );"
      ]
    },
    {
      "type": "button",
      "id": "try-again",
      "text": "Try again",
      "action": [
        "if (getNumberOfAtoms() > 2) {",
        "  untraceAtom(getNumberOfAtoms()-1);",
        "  removeAtom(getNumberOfAtoms()-1);",
        "}"
      ]
    },
    {
      "type": "checkbox",
      "id": "select-show-force-vectors",
      "text": "Show force on objects",
      "property": "showForceVectors"
    },
    {
      "type": "checkbox",
      "id": "select-show-electric-field",
      "text": "Show electric field",
      "property": "showElectricField"
    },
    {
      "type": "radio",
      "id": "select-level",
      "orientation": "horizontal",
      "property": "selectedLevelID",
      "options": [
        {
          "text": "Level 1",
          "value": "level1"
        },
        {
          "text": "Level 2",
          "value": "level2"
        }
      ]
    }
  ],
  "layout": {
    "bottom": [
      ["add-atom", "try-again", "select-level"],
      ["select-show-electric-field", "select-show-force-vectors"]
    ]
  },
  "template": [
    {
      "id": "bottom",
      "top": "model.bottom",
      "width": "model.width",
      "left": "model.left",
      "align": "center"
    }
  ]
}
